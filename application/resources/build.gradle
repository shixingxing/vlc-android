plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {

    packagingOptions {
        jniLibs {
            pickFirsts += ['**/*.so']
        }
    }


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        compileSdk rootProject.ext.compileSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "APP_ID", "\"${rootProject.ext.appId}\""
        buildConfigField 'String', 'VLC_OPEN_SUBTITLES_API_KEY', "\"${getOSApiKey(project)}\""
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "String", "APP_ID", "\"${rootProject.ext.appId}.debug\""
        }
        dev {
            initWith debug
            matchingFallbacks = ['debug']
        }
        vlcBundle {
            initWith release
            matchingFallbacks = ['release']
        }

    }

    sourceSets.main {
        java.srcDirs = rootProject.ext.vlcMajorVersion == 4 ? ['src', 'vlc4/src'] : ['src', 'vlc3/src']
    }

    sourceSets.debug {
        res.srcDirs = ['flavors/debug/res']
    }
    sourceSets.dev {
        res.srcDirs = ['flavors/debug/res']
    }
    namespace 'org.videolan.resources'
    buildFeatures {
        buildConfig true
    }

}

static def getOSApiKey(project) {
    return System.getenv('VLC_OPEN_SUBTITLES_API_KEY') ?:  project.properties['vlc_open_subtitles_api_key'] ?: ""
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api 'androidx.multidex:multidex:2.0.1'


    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.ext.kotlinx_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.kotlinx_version"

    api project(':application:tools')
    devApi project(':libvlcjni:libvlc')
    devApi project(':medialibrary')
    debugApi "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
    debugApi "org.videolan.android:medialibrary-all:$rootProject.ext.medialibraryVersion"
    releaseApi "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
    releaseApi "org.videolan.android:medialibrary-all:$rootProject.ext.medialibraryVersion"
    vlcBundleApi "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
    vlcBundleApi "org.videolan.android:medialibrary-all:$rootProject.ext.medialibraryVersion"

    api "com.google.android.material:material:$rootProject.ext.androidxMaterialVersion"

    api "androidx.preference:preference-ktx:$androidxPreferencesVersion"
    api "androidx.leanback:leanback:$rootProject.ext.androidxLeanbackVersion"
    api "androidx.leanback:leanback-preference:$rootProject.ext.androidxLeanbackVersion"

    // Retrofit
    api "com.squareup.okhttp3:okhttp:4.9.3"
    api 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    api 'com.github.mrmike:ok2curl:0.8.0'
    api "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit"
    api "com.squareup.retrofit2:converter-moshi:$rootProject.ext.retrofit"
    api "com.squareup.moshi:moshi-adapters:$rootProject.ext.moshi"

    api "androidx.core:core-ktx:$rootProject.ext.androidxCoreVersion"
    testImplementation "androidx.test:core:$rootProject.ext.testCore"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitExtVersion"
}
repositories {
    mavenCentral()
}
